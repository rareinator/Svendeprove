@page "/"

<div class="d-flex justify-content-center align-items-center flex-column">
    <h1>Oversigt</h1>
    <p>
        Her kan du se journaler, Undersøgelser og Indlæggelser for en patient. <br />
        Samt oprette nye journaler, Undersøgelser og Indlæggelser.
    </p>

    <div class="m-4 w-25">
        <BlazoredTypeahead SearchMethod="GetPatientsLocal"
                           TValue="UserModel"
                           TItem="UserModel"
                           Value="selectedPatient"
                           ValueChanged="SelectedPatientChanged"
                           ValueExpression="@(() => selectedPatient)"
                           DisableClear="true"
                           placeholder="Søg efter patient navn...">
            <SelectedTemplate Context="patient">
                @patient.Name - @patient.SocialIdNr
            </SelectedTemplate>
            <ResultTemplate Context="patient">
                @patient.Name @patient.SocialIdNr
            </ResultTemplate>
        </BlazoredTypeahead>
    </div>

</div>

<TabControl>
    <TabPage Text="Journaler">

        <div class="d-flex flex-column p-4">
            @if (selectedPatient != null)
            {
                <p><b>Patient:</b> @selectedPatient.Name</p>
                <p><b>Social Id Nr.:</b> @selectedPatient.SocialIdNr</p>
                <button @onclick="ShowJournalModal" class="btn btn-primary align-self-end mb-2 mr-4">Opret ny Journal</button>
            }

            <Journals journals="journals" />
        </div>
    </TabPage>
    <TabPage Text="Undersøgelser">
        <div class="d-flex flex-column p-4">
            @if (selectedPatient != null)
            {
                <p><b>Patient:</b> @selectedPatient.Name</p>
                <p><b>Social Id Nr.:</b> @selectedPatient.SocialIdNr</p>
                <button @onclick="() => ShowExaminationModal(new BookingModel { BookingId = 0})" class="btn btn-primary align-self-end mb-2 mr-4">Opret ny Undersøgelse</button>
            }

            <Examinations OnEditClick="ShowExaminationModal" Bookings="bookings" />
        </div>
    </TabPage>
    <TabPage Text="Indlæggelser">

    </TabPage>
</TabControl>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    [CascadingParameter]
    public IModalService Modal { get; set; }

    private List<UserModel> patients;
    private UserModel selectedPatient;

    private List<JournalModel> journals;
    private List<BookingModel> bookings;

    protected override async Task OnInitializedAsync()
    {
        patients = await PatientData.GetPatients();
    }

    private async Task<IEnumerable<UserModel>> GetPatientsLocal(string searchText)
    {
        return await Task.FromResult(patients.Where(x => x.Name.ToLower().Contains(searchText.ToLower())).ToList());
    }


    private async Task SelectedPatientChanged(UserModel patient)
    {
        selectedPatient = patient;
        journals = await JournalData.GetJournalsByPatient(patient.UserName);
        bookings = await BookingData.GetBookingsByPatient(patient.UserName);
    }

    private async Task ShowJournalModal()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(CreateJournal.Patient), selectedPatient);

        var createJournal = Modal.Show<CreateJournal>("Opret Journal", parameters);
        var result = await createJournal.Result;


        if (!result.Cancelled)
        {
            JournalModel newJournal = await JournalData.InsertJournal((JournalModel)result.Data);
            journals.Add(newJournal);
        }
    }

    private async Task ShowExaminationModal(BookingModel booking)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(CreateExamimation.SelectedPatient), selectedPatient);
        if (booking.BookingId != 0)
        {
            parameters.Add(nameof(CreateExamimation.SelectedBooking), booking);
            parameters.Add(nameof(CreateExamimation.availableEmployees), await BookingData.GetAvailableEmployees(booking.Hospital.HospitalId));
        }
        else
        {
            bool approved = false;

            var authState = await authenticationStateTask;
            var user = authState.User;
            var userRole = user.Claims.Where(c => c.Type == "user_role").FirstOrDefault();

            if (userRole.Value == "Doctor" || userRole.Value == "Nurse")
            {
                approved = true;
            }

            parameters.Add(nameof(CreateExamimation.SelectedBooking),
                new BookingModel
                {
                    Type = BookingType.Examination,
                    Approved = approved
                });
        }

        var createJournal = Modal.Show<CreateExamimation>("Opret Undersøgelse", parameters);
        var result = await createJournal.Result;


        if (!result.Cancelled)
        {
            BookingModel updatedBooking = (BookingModel)result.Data;
            if (updatedBooking != null)
            {
                if (updatedBooking.BookingId == 0)
                {
                    BookingModel newBooking = await BookingData.InsertBooking(updatedBooking);
                    bookings.Add(newBooking);
                }
                else
                {
                    await BookingData.UpdateBooking(updatedBooking);
                }
            }
            else
            {
                bookings = await BookingData.GetBookingsByPatient(selectedPatient.UserName);
            }
        }
    }
}
