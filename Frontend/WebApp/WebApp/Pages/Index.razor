@page "/"
@using System.IdentityModel.Tokens.Jwt



<div class="h-100 container">
    <div class="row">
        <div class="col-lg-3"></div>
        <div class="col-lg-6 text-center">
            <h1>Velkommen til HOSPI Inc.</h1>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-4"></div>
        <div class="col-4">
            <button class="btn btn-outline-info" @onclick="Toggle">@Caption</button>
        </div>
    </div>

    <form @onsubmit="TestLogin">
        <div class="row text-center mt-1">
            <div class="col-4"></div>
            <div class="col-4">
                <input class="form-control input d-inline-block" placeholder="Username" @bind-value="User.Username" @bind-value:event="onchange" required />
            </div>
        </div>
        <div class="row text-center mt-1">
            <div class="col-4"></div>
            <div class="col-4">
                <input class="form-control input d-inline-block" type="password" placeholder="Password" @bind-value="User.Password" @bind-value:event="onchange" required />
            </div>
        </div>
        <div class="row mt-1">
            <div class="col-4"></div>
            <div class="col-4">
                <button class="btn btn-success w-100" type="submit">Login</button>
            </div>
        </div>
    </form>

</div>

@code{

    [CascadingParameter(Name = "User")]
    public UserModelOld User { get; set; }
    public UserModel patient { get; set; }
    bool error = false;
    string errorMessage;

    private async void Login()
    {
        Console.WriteLine("Login");
        if (clicked)
        {
            var tokenString = await UserData.Login(User, "employee");
            User.Token = tokenString.AccessToken;
            if (User.Token != "" && User.Token != null)
            {
                var handler = new JwtSecurityTokenHandler();
                var jsonToken = handler.ReadJwtToken(User.Token);

                User.Role = jsonToken.Claims.First(claim => claim.Type == "role").Value;
                User.Username = jsonToken.Claims.First(claim => claim.Type == "sub").Value;
                User.Scope = jsonToken.Claims.First(claim => claim.Type == "scope").Value;
                User.Name = jsonToken.Claims.First(claim => claim.Type == "fullname").Value;
                User.UserID = Convert.ToInt32(jsonToken.Claims.First(claim => claim.Type == "userID").Value);


                if (Http.DefaultRequestHeaders.Contains("Authorization"))
                {
                    Http.DefaultRequestHeaders.Remove("Authorization");
                }
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", User.Token);
                _accountService.Login(User);


                MyNavigationManager.NavigateTo("/Administration");
            }
            else
            {
                error = true;
                errorMessage = "Could not login";
                StateHasChanged();
            }
        }
        else
        {

            var tokenString = await UserData.Login(User, "patient");
            User.Token = tokenString.AccessToken;
            if (User.Token != "" && User.Token != null)
            {
                var handler = new JwtSecurityTokenHandler();
                var jsonToken = handler.ReadJwtToken(User.Token);

                User.Role = jsonToken.Claims.First(claim => claim.Type == "role").Value;
                User.Username = jsonToken.Claims.First(claim => claim.Type == "sub").Value;
                User.Scope = jsonToken.Claims.First(claim => claim.Type == "scope").Value;
                User.Name = jsonToken.Claims.First(claim => claim.Type == "fullname").Value;
                User.UserID = Convert.ToInt32(jsonToken.Claims.First(claim => claim.Type == "userID").Value);


                if (Http.DefaultRequestHeaders.Contains("Authorization"))
                {
                    Http.DefaultRequestHeaders.Remove("Authorization");
                }
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", User.Token);
                _accountService.Login(User);


                MyNavigationManager.NavigateTo("/Journals");
            }
            else
            {
                error = true;
                errorMessage = "Could not login";
                StateHasChanged();
            }
        }
    }

    private async void TestLogin()
    {
        if (clicked)
        {
            User.Role = "1";
            User.Token = "TestToken";
            _accountService.Login(User);
            MyNavigationManager.NavigateTo("/Administration");
        }
        else
        {
            User.Role = "0";
            User.Token = "TestToken";
            _accountService.Login(User);
            MyNavigationManager.NavigateTo("/Journals");
        }
    }

    private string Caption => clicked ? "Patient" : "Ansatte";


    private bool clicked = false;


    private void Toggle()
    {
        clicked = !clicked;
        Console.WriteLine(DateTime.Now);
    }
}

