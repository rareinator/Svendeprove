@page "/Administration"


<div class="d-flex justify-content-center align-items-center flex-column">
    <h1>Oversigt</h1>
    <p>Her kan du se journaler, Undersøgelser óg Indlæggelser for en patient. Samt oprette </p>

    <div class="m-4 w-25">
        <BlazoredTypeahead SearchMethod="GetPatientsLocal"
                           TValue="PatientModel"
                           TItem="PatientModel"
                           Value="selectedPatient"
                           ValueChanged="SelectedPatientChanged"
                           ValueExpression="@(() => selectedPatient)"
                           DisableClear="true"
                           placeholder="Søg efter patient navn...">
            <SelectedTemplate>
                @context.Name - @context.SocialIdNr
            </SelectedTemplate>
            <ResultTemplate Context="patient">
                @patient.Name @patient.SocialIdNr (PatientId: @patient.PatientId)
            </ResultTemplate>
        </BlazoredTypeahead>
    </div>

</div>

<TabControl>
    <TabPage Text="Journaler">

        <div class="d-flex flex-column p-4">
            @if (selectedPatient != null)
            {
                <p><b>Patient:</b> @selectedPatient.Name</p>
                <p><b>Social Id Nr.:</b> @selectedPatient.SocialIdNr</p>
                <button @onclick="ShowModal" class="btn btn-primary align-self-end mb-2 mr-4">Opret ny Journal</button>
            }

            <Journals journals="journals" />
        </div>
    </TabPage>
    <TabPage Text="Undersøgelser">

    </TabPage>
    <TabPage Text="Indlæggelser">

    </TabPage>
</TabControl>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    private List<PatientModel> patients;
    private PatientModel selectedPatient;

    private List<JournalModel> journals;

    protected override void OnInitialized()
    {
        patients = PatientData.GetPatients();
    }

    private async Task<IEnumerable<PatientModel>> GetPatientsLocal(string searchText)
    {
        return await Task.FromResult(patients.Where(x => x.Name.ToLower().Contains(searchText.ToLower())).ToList());
    }


    private async Task SelectedPatientChanged(PatientModel patient)
    {
        selectedPatient = patient;
        journals = PatientData.GetPatientJournals(patient.PatientId);
    }

    private async Task ShowModal()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(CreateJournal.Patient), selectedPatient);

        var createJournal = Modal.Show<CreateJournal>("Opret Journal", parameters);
        var result = await createJournal.Result;


        if (!result.Cancelled)
        {
            PatientData.InsertPatientJournal((JournalModel)result.Data);
            journals.Add((JournalModel)result.Data);
        }
    }
}