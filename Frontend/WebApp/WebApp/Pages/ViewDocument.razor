@page "/ViewDocument/{DocumentId:int}"

<h4>
    <button type="button" class="btn btn-primary" @onclick="Back">Back</button>&nbsp;
    @* AUTHORIZATION HERE *@
    <button type="button" class="btn btn-secondary" @onclick="EditDocument">Ret</button>
    @* ///////////////// *@
</h4>
<br />
<i>@SelectedDocument.CreationTime</i>
<div>
    <h1>@SelectedDocument.Title</h1>
</div>
<hr />
<div>
    <div>
        @((MarkupString)SelectedDocument.Content)
    </div>
</div>
@if (SelectedDocument.Attachments != null)
{
<div>
    @foreach (var attacment in SelectedDocument.Attachments)
    {
        <img src="@attacment.Path" alt="Journal Document Photo" class="img-thumbnail img-fluid" />
        @if (attacment.Prediction != null)
        {
            @((MarkupString)attacment.Prediction.Positive)
            @((MarkupString)attacment.Prediction.Negative)
        }
    }
    <button type="button" class="btn btn-success" @onclick="() => GetPrediction(SelectedDocument.Attachments)">Knap</button>
</div>

}

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }

    [Parameter]
    public int DocumentId { get; set; }

    private JournalDocumentModel SelectedDocument = new JournalDocumentModel();


    protected override async Task OnInitializedAsync()
    {
        SelectedDocument = await JournalData.GetJournalDocument(DocumentId);
    }

    private async Task EditDocument()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(CreateDocument.SelectedDocument), SelectedDocument);

        var createDocument = Modal.Show<CreateDocument>("Ret Dokument", parameters);
        var result = await createDocument.Result;

        if (!result.Cancelled)
        {
            JournalDocumentModel document = (JournalDocumentModel)result.Data;
            if (document != null)
            {
                await JournalData.UpdateJournalDocument(document);
            }
            else
            {
                StateHasChanged();
                Back();
            }
        }
    }

    async void GetPrediction(List<AttachmentModel> attachments)
    {
        List<string> paths = new List<string>();

        foreach (var attachment in attachments)
        {
            paths.Add(attachment.Path);
        }

        List<PredictionModel> predictions = await JournalData.GetPredictions(paths);

        foreach (var prediction in predictions)
        {
            AttachmentModel attachment = SelectedDocument.Attachments.Where(a => a.Path == prediction.Url).FirstOrDefault();

            attachment.Prediction.Positive = prediction.Data.Prediction.Positive;

            attachment.Prediction.Positive = prediction.Data.Prediction.Positive;
        }
    }

    void Back()
    {
        string url = MyNavigationManager.ToAbsoluteUri($"/journal/{SelectedDocument.JournalId}").AbsoluteUri;
        MyNavigationManager.NavigateTo(url);
    }
}
