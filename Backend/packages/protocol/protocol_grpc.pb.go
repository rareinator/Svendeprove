// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PatientServiceClient is the client API for PatientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PatientServiceClient interface {
	GetHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Health, error)
	GetDiagnose(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Diagnose, error)
	GetDiagnoses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Diagnoses, error)
	GetSymptoms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Symptoms, error)
	GetSymptom(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Symptom, error)
	CreatePatientDiagnose(ctx context.Context, in *PatientDiagnose, opts ...grpc.CallOption) (*PatientDiagnose, error)
	GetPatientDiagnoses(ctx context.Context, in *Request, opts ...grpc.CallOption) (*PatientDiagnoses, error)
	GetPatientDiagnose(ctx context.Context, in *Request, opts ...grpc.CallOption) (*PatientDiagnose, error)
	UpdatePatientDiagnose(ctx context.Context, in *PatientDiagnose, opts ...grpc.CallOption) (*PatientDiagnose, error)
	DeletePatientDiagnose(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Status, error)
	CreateDiagnoseSymptom(ctx context.Context, in *DiagnoseSymptom, opts ...grpc.CallOption) (*DiagnoseSymptom, error)
	GetDiagnoseSymptoms(ctx context.Context, in *Request, opts ...grpc.CallOption) (*DiagnoseSymptoms, error)
	UpdateDiagnoseSymptom(ctx context.Context, in *DiagnoseSymptomUpdateRequest, opts ...grpc.CallOption) (*DiagnoseSymptom, error)
	DeleteDiagnoseSymptom(ctx context.Context, in *DiagnoseSymptom, opts ...grpc.CallOption) (*Status, error)
}

type patientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPatientServiceClient(cc grpc.ClientConnInterface) PatientServiceClient {
	return &patientServiceClient{cc}
}

func (c *patientServiceClient) GetHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/PatientService/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetDiagnose(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Diagnose, error) {
	out := new(Diagnose)
	err := c.cc.Invoke(ctx, "/PatientService/GetDiagnose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetDiagnoses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Diagnoses, error) {
	out := new(Diagnoses)
	err := c.cc.Invoke(ctx, "/PatientService/GetDiagnoses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetSymptoms(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Symptoms, error) {
	out := new(Symptoms)
	err := c.cc.Invoke(ctx, "/PatientService/GetSymptoms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetSymptom(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Symptom, error) {
	out := new(Symptom)
	err := c.cc.Invoke(ctx, "/PatientService/GetSymptom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) CreatePatientDiagnose(ctx context.Context, in *PatientDiagnose, opts ...grpc.CallOption) (*PatientDiagnose, error) {
	out := new(PatientDiagnose)
	err := c.cc.Invoke(ctx, "/PatientService/CreatePatientDiagnose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetPatientDiagnoses(ctx context.Context, in *Request, opts ...grpc.CallOption) (*PatientDiagnoses, error) {
	out := new(PatientDiagnoses)
	err := c.cc.Invoke(ctx, "/PatientService/GetPatientDiagnoses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetPatientDiagnose(ctx context.Context, in *Request, opts ...grpc.CallOption) (*PatientDiagnose, error) {
	out := new(PatientDiagnose)
	err := c.cc.Invoke(ctx, "/PatientService/GetPatientDiagnose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) UpdatePatientDiagnose(ctx context.Context, in *PatientDiagnose, opts ...grpc.CallOption) (*PatientDiagnose, error) {
	out := new(PatientDiagnose)
	err := c.cc.Invoke(ctx, "/PatientService/UpdatePatientDiagnose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) DeletePatientDiagnose(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/PatientService/DeletePatientDiagnose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) CreateDiagnoseSymptom(ctx context.Context, in *DiagnoseSymptom, opts ...grpc.CallOption) (*DiagnoseSymptom, error) {
	out := new(DiagnoseSymptom)
	err := c.cc.Invoke(ctx, "/PatientService/CreateDiagnoseSymptom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetDiagnoseSymptoms(ctx context.Context, in *Request, opts ...grpc.CallOption) (*DiagnoseSymptoms, error) {
	out := new(DiagnoseSymptoms)
	err := c.cc.Invoke(ctx, "/PatientService/GetDiagnoseSymptoms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) UpdateDiagnoseSymptom(ctx context.Context, in *DiagnoseSymptomUpdateRequest, opts ...grpc.CallOption) (*DiagnoseSymptom, error) {
	out := new(DiagnoseSymptom)
	err := c.cc.Invoke(ctx, "/PatientService/UpdateDiagnoseSymptom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) DeleteDiagnoseSymptom(ctx context.Context, in *DiagnoseSymptom, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/PatientService/DeleteDiagnoseSymptom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientServiceServer is the server API for PatientService service.
// All implementations must embed UnimplementedPatientServiceServer
// for forward compatibility
type PatientServiceServer interface {
	GetHealth(context.Context, *Empty) (*Health, error)
	GetDiagnose(context.Context, *Request) (*Diagnose, error)
	GetDiagnoses(context.Context, *Empty) (*Diagnoses, error)
	GetSymptoms(context.Context, *Empty) (*Symptoms, error)
	GetSymptom(context.Context, *Request) (*Symptom, error)
	CreatePatientDiagnose(context.Context, *PatientDiagnose) (*PatientDiagnose, error)
	GetPatientDiagnoses(context.Context, *Request) (*PatientDiagnoses, error)
	GetPatientDiagnose(context.Context, *Request) (*PatientDiagnose, error)
	UpdatePatientDiagnose(context.Context, *PatientDiagnose) (*PatientDiagnose, error)
	DeletePatientDiagnose(context.Context, *Request) (*Status, error)
	CreateDiagnoseSymptom(context.Context, *DiagnoseSymptom) (*DiagnoseSymptom, error)
	GetDiagnoseSymptoms(context.Context, *Request) (*DiagnoseSymptoms, error)
	UpdateDiagnoseSymptom(context.Context, *DiagnoseSymptomUpdateRequest) (*DiagnoseSymptom, error)
	DeleteDiagnoseSymptom(context.Context, *DiagnoseSymptom) (*Status, error)
	mustEmbedUnimplementedPatientServiceServer()
}

// UnimplementedPatientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPatientServiceServer struct {
}

func (UnimplementedPatientServiceServer) GetHealth(context.Context, *Empty) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedPatientServiceServer) GetDiagnose(context.Context, *Request) (*Diagnose, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiagnose not implemented")
}
func (UnimplementedPatientServiceServer) GetDiagnoses(context.Context, *Empty) (*Diagnoses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiagnoses not implemented")
}
func (UnimplementedPatientServiceServer) GetSymptoms(context.Context, *Empty) (*Symptoms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSymptoms not implemented")
}
func (UnimplementedPatientServiceServer) GetSymptom(context.Context, *Request) (*Symptom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSymptom not implemented")
}
func (UnimplementedPatientServiceServer) CreatePatientDiagnose(context.Context, *PatientDiagnose) (*PatientDiagnose, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatientDiagnose not implemented")
}
func (UnimplementedPatientServiceServer) GetPatientDiagnoses(context.Context, *Request) (*PatientDiagnoses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientDiagnoses not implemented")
}
func (UnimplementedPatientServiceServer) GetPatientDiagnose(context.Context, *Request) (*PatientDiagnose, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientDiagnose not implemented")
}
func (UnimplementedPatientServiceServer) UpdatePatientDiagnose(context.Context, *PatientDiagnose) (*PatientDiagnose, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatientDiagnose not implemented")
}
func (UnimplementedPatientServiceServer) DeletePatientDiagnose(context.Context, *Request) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePatientDiagnose not implemented")
}
func (UnimplementedPatientServiceServer) CreateDiagnoseSymptom(context.Context, *DiagnoseSymptom) (*DiagnoseSymptom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiagnoseSymptom not implemented")
}
func (UnimplementedPatientServiceServer) GetDiagnoseSymptoms(context.Context, *Request) (*DiagnoseSymptoms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiagnoseSymptoms not implemented")
}
func (UnimplementedPatientServiceServer) UpdateDiagnoseSymptom(context.Context, *DiagnoseSymptomUpdateRequest) (*DiagnoseSymptom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiagnoseSymptom not implemented")
}
func (UnimplementedPatientServiceServer) DeleteDiagnoseSymptom(context.Context, *DiagnoseSymptom) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiagnoseSymptom not implemented")
}
func (UnimplementedPatientServiceServer) mustEmbedUnimplementedPatientServiceServer() {}

// UnsafePatientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatientServiceServer will
// result in compilation errors.
type UnsafePatientServiceServer interface {
	mustEmbedUnimplementedPatientServiceServer()
}

func RegisterPatientServiceServer(s grpc.ServiceRegistrar, srv PatientServiceServer) {
	s.RegisterService(&PatientService_ServiceDesc, srv)
}

func _PatientService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetHealth(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetDiagnose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetDiagnose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/GetDiagnose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetDiagnose(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetDiagnoses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetDiagnoses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/GetDiagnoses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetDiagnoses(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetSymptoms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetSymptoms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/GetSymptoms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetSymptoms(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetSymptom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetSymptom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/GetSymptom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetSymptom(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_CreatePatientDiagnose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientDiagnose)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).CreatePatientDiagnose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/CreatePatientDiagnose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).CreatePatientDiagnose(ctx, req.(*PatientDiagnose))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetPatientDiagnoses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetPatientDiagnoses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/GetPatientDiagnoses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetPatientDiagnoses(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetPatientDiagnose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetPatientDiagnose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/GetPatientDiagnose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetPatientDiagnose(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_UpdatePatientDiagnose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientDiagnose)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).UpdatePatientDiagnose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/UpdatePatientDiagnose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).UpdatePatientDiagnose(ctx, req.(*PatientDiagnose))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_DeletePatientDiagnose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).DeletePatientDiagnose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/DeletePatientDiagnose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).DeletePatientDiagnose(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_CreateDiagnoseSymptom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiagnoseSymptom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).CreateDiagnoseSymptom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/CreateDiagnoseSymptom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).CreateDiagnoseSymptom(ctx, req.(*DiagnoseSymptom))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetDiagnoseSymptoms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetDiagnoseSymptoms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/GetDiagnoseSymptoms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetDiagnoseSymptoms(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_UpdateDiagnoseSymptom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiagnoseSymptomUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).UpdateDiagnoseSymptom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/UpdateDiagnoseSymptom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).UpdateDiagnoseSymptom(ctx, req.(*DiagnoseSymptomUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_DeleteDiagnoseSymptom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiagnoseSymptom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).DeleteDiagnoseSymptom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/DeleteDiagnoseSymptom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).DeleteDiagnoseSymptom(ctx, req.(*DiagnoseSymptom))
	}
	return interceptor(ctx, in, info, handler)
}

// PatientService_ServiceDesc is the grpc.ServiceDesc for PatientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PatientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PatientService",
	HandlerType: (*PatientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _PatientService_GetHealth_Handler,
		},
		{
			MethodName: "GetDiagnose",
			Handler:    _PatientService_GetDiagnose_Handler,
		},
		{
			MethodName: "GetDiagnoses",
			Handler:    _PatientService_GetDiagnoses_Handler,
		},
		{
			MethodName: "GetSymptoms",
			Handler:    _PatientService_GetSymptoms_Handler,
		},
		{
			MethodName: "GetSymptom",
			Handler:    _PatientService_GetSymptom_Handler,
		},
		{
			MethodName: "CreatePatientDiagnose",
			Handler:    _PatientService_CreatePatientDiagnose_Handler,
		},
		{
			MethodName: "GetPatientDiagnoses",
			Handler:    _PatientService_GetPatientDiagnoses_Handler,
		},
		{
			MethodName: "GetPatientDiagnose",
			Handler:    _PatientService_GetPatientDiagnose_Handler,
		},
		{
			MethodName: "UpdatePatientDiagnose",
			Handler:    _PatientService_UpdatePatientDiagnose_Handler,
		},
		{
			MethodName: "DeletePatientDiagnose",
			Handler:    _PatientService_DeletePatientDiagnose_Handler,
		},
		{
			MethodName: "CreateDiagnoseSymptom",
			Handler:    _PatientService_CreateDiagnoseSymptom_Handler,
		},
		{
			MethodName: "GetDiagnoseSymptoms",
			Handler:    _PatientService_GetDiagnoseSymptoms_Handler,
		},
		{
			MethodName: "UpdateDiagnoseSymptom",
			Handler:    _PatientService_UpdateDiagnoseSymptom_Handler,
		},
		{
			MethodName: "DeleteDiagnoseSymptom",
			Handler:    _PatientService_DeleteDiagnoseSymptom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}

// IotServiceClient is the client API for IotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IotServiceClient interface {
	GetHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Health, error)
	UploadData(ctx context.Context, in *IOTData, opts ...grpc.CallOption) (*IOTData, error)
	ReadData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*IOTDatas, error)
	ReadDataInTimeFrame(ctx context.Context, in *IOTTimeframeRequest, opts ...grpc.CallOption) (*IOTDatas, error)
}

type iotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIotServiceClient(cc grpc.ClientConnInterface) IotServiceClient {
	return &iotServiceClient{cc}
}

func (c *iotServiceClient) GetHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/IotService/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotServiceClient) UploadData(ctx context.Context, in *IOTData, opts ...grpc.CallOption) (*IOTData, error) {
	out := new(IOTData)
	err := c.cc.Invoke(ctx, "/IotService/UploadData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotServiceClient) ReadData(ctx context.Context, in *Request, opts ...grpc.CallOption) (*IOTDatas, error) {
	out := new(IOTDatas)
	err := c.cc.Invoke(ctx, "/IotService/ReadData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotServiceClient) ReadDataInTimeFrame(ctx context.Context, in *IOTTimeframeRequest, opts ...grpc.CallOption) (*IOTDatas, error) {
	out := new(IOTDatas)
	err := c.cc.Invoke(ctx, "/IotService/ReadDataInTimeFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IotServiceServer is the server API for IotService service.
// All implementations must embed UnimplementedIotServiceServer
// for forward compatibility
type IotServiceServer interface {
	GetHealth(context.Context, *Empty) (*Health, error)
	UploadData(context.Context, *IOTData) (*IOTData, error)
	ReadData(context.Context, *Request) (*IOTDatas, error)
	ReadDataInTimeFrame(context.Context, *IOTTimeframeRequest) (*IOTDatas, error)
	mustEmbedUnimplementedIotServiceServer()
}

// UnimplementedIotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIotServiceServer struct {
}

func (UnimplementedIotServiceServer) GetHealth(context.Context, *Empty) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedIotServiceServer) UploadData(context.Context, *IOTData) (*IOTData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadData not implemented")
}
func (UnimplementedIotServiceServer) ReadData(context.Context, *Request) (*IOTDatas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadData not implemented")
}
func (UnimplementedIotServiceServer) ReadDataInTimeFrame(context.Context, *IOTTimeframeRequest) (*IOTDatas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDataInTimeFrame not implemented")
}
func (UnimplementedIotServiceServer) mustEmbedUnimplementedIotServiceServer() {}

// UnsafeIotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IotServiceServer will
// result in compilation errors.
type UnsafeIotServiceServer interface {
	mustEmbedUnimplementedIotServiceServer()
}

func RegisterIotServiceServer(s grpc.ServiceRegistrar, srv IotServiceServer) {
	s.RegisterService(&IotService_ServiceDesc, srv)
}

func _IotService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IotServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IotService/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IotServiceServer).GetHealth(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IotService_UploadData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IOTData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IotServiceServer).UploadData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IotService/UploadData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IotServiceServer).UploadData(ctx, req.(*IOTData))
	}
	return interceptor(ctx, in, info, handler)
}

func _IotService_ReadData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IotServiceServer).ReadData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IotService/ReadData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IotServiceServer).ReadData(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _IotService_ReadDataInTimeFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IOTTimeframeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IotServiceServer).ReadDataInTimeFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IotService/ReadDataInTimeFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IotServiceServer).ReadDataInTimeFrame(ctx, req.(*IOTTimeframeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IotService_ServiceDesc is the grpc.ServiceDesc for IotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IotService",
	HandlerType: (*IotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _IotService_GetHealth_Handler,
		},
		{
			MethodName: "UploadData",
			Handler:    _IotService_UploadData_Handler,
		},
		{
			MethodName: "ReadData",
			Handler:    _IotService_ReadData_Handler,
		},
		{
			MethodName: "ReadDataInTimeFrame",
			Handler:    _IotService_ReadDataInTimeFrame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}

// BookingServiceClient is the client API for BookingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingServiceClient interface {
	GetHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Health, error)
	CreateBooking(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*Booking, error)
	GetBooking(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Booking, error)
	UpdateBooking(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*Booking, error)
	DeleteBooking(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Status, error)
	GetBookingsByPatient(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Bookings, error)
	GetBookingsByEmployee(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Bookings, error)
	GetAvailableTimesForDoctor(ctx context.Context, in *TimeFrameRequest, opts ...grpc.CallOption) (*Strings, error)
}

type bookingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingServiceClient(cc grpc.ClientConnInterface) BookingServiceClient {
	return &bookingServiceClient{cc}
}

func (c *bookingServiceClient) GetHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/BookingService/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) CreateBooking(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*Booking, error) {
	out := new(Booking)
	err := c.cc.Invoke(ctx, "/BookingService/CreateBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBooking(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Booking, error) {
	out := new(Booking)
	err := c.cc.Invoke(ctx, "/BookingService/GetBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) UpdateBooking(ctx context.Context, in *Booking, opts ...grpc.CallOption) (*Booking, error) {
	out := new(Booking)
	err := c.cc.Invoke(ctx, "/BookingService/UpdateBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) DeleteBooking(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/BookingService/DeleteBooking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBookingsByPatient(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Bookings, error) {
	out := new(Bookings)
	err := c.cc.Invoke(ctx, "/BookingService/GetBookingsByPatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetBookingsByEmployee(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Bookings, error) {
	out := new(Bookings)
	err := c.cc.Invoke(ctx, "/BookingService/GetBookingsByEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingServiceClient) GetAvailableTimesForDoctor(ctx context.Context, in *TimeFrameRequest, opts ...grpc.CallOption) (*Strings, error) {
	out := new(Strings)
	err := c.cc.Invoke(ctx, "/BookingService/GetAvailableTimesForDoctor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingServiceServer is the server API for BookingService service.
// All implementations must embed UnimplementedBookingServiceServer
// for forward compatibility
type BookingServiceServer interface {
	GetHealth(context.Context, *Empty) (*Health, error)
	CreateBooking(context.Context, *Booking) (*Booking, error)
	GetBooking(context.Context, *Request) (*Booking, error)
	UpdateBooking(context.Context, *Booking) (*Booking, error)
	DeleteBooking(context.Context, *Request) (*Status, error)
	GetBookingsByPatient(context.Context, *Request) (*Bookings, error)
	GetBookingsByEmployee(context.Context, *Request) (*Bookings, error)
	GetAvailableTimesForDoctor(context.Context, *TimeFrameRequest) (*Strings, error)
	mustEmbedUnimplementedBookingServiceServer()
}

// UnimplementedBookingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBookingServiceServer struct {
}

func (UnimplementedBookingServiceServer) GetHealth(context.Context, *Empty) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedBookingServiceServer) CreateBooking(context.Context, *Booking) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (UnimplementedBookingServiceServer) GetBooking(context.Context, *Request) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooking not implemented")
}
func (UnimplementedBookingServiceServer) UpdateBooking(context.Context, *Booking) (*Booking, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBooking not implemented")
}
func (UnimplementedBookingServiceServer) DeleteBooking(context.Context, *Request) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBooking not implemented")
}
func (UnimplementedBookingServiceServer) GetBookingsByPatient(context.Context, *Request) (*Bookings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingsByPatient not implemented")
}
func (UnimplementedBookingServiceServer) GetBookingsByEmployee(context.Context, *Request) (*Bookings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookingsByEmployee not implemented")
}
func (UnimplementedBookingServiceServer) GetAvailableTimesForDoctor(context.Context, *TimeFrameRequest) (*Strings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableTimesForDoctor not implemented")
}
func (UnimplementedBookingServiceServer) mustEmbedUnimplementedBookingServiceServer() {}

// UnsafeBookingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServiceServer will
// result in compilation errors.
type UnsafeBookingServiceServer interface {
	mustEmbedUnimplementedBookingServiceServer()
}

func RegisterBookingServiceServer(s grpc.ServiceRegistrar, srv BookingServiceServer) {
	s.RegisterService(&BookingService_ServiceDesc, srv)
}

func _BookingService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookingService/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetHealth(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Booking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookingService/CreateBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).CreateBooking(ctx, req.(*Booking))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookingService/GetBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBooking(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_UpdateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Booking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).UpdateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookingService/UpdateBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).UpdateBooking(ctx, req.(*Booking))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_DeleteBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).DeleteBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookingService/DeleteBooking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).DeleteBooking(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBookingsByPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBookingsByPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookingService/GetBookingsByPatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBookingsByPatient(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetBookingsByEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetBookingsByEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookingService/GetBookingsByEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetBookingsByEmployee(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingService_GetAvailableTimesForDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeFrameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServiceServer).GetAvailableTimesForDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookingService/GetAvailableTimesForDoctor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServiceServer).GetAvailableTimesForDoctor(ctx, req.(*TimeFrameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingService_ServiceDesc is the grpc.ServiceDesc for BookingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BookingService",
	HandlerType: (*BookingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _BookingService_GetHealth_Handler,
		},
		{
			MethodName: "CreateBooking",
			Handler:    _BookingService_CreateBooking_Handler,
		},
		{
			MethodName: "GetBooking",
			Handler:    _BookingService_GetBooking_Handler,
		},
		{
			MethodName: "UpdateBooking",
			Handler:    _BookingService_UpdateBooking_Handler,
		},
		{
			MethodName: "DeleteBooking",
			Handler:    _BookingService_DeleteBooking_Handler,
		},
		{
			MethodName: "GetBookingsByPatient",
			Handler:    _BookingService_GetBookingsByPatient_Handler,
		},
		{
			MethodName: "GetBookingsByEmployee",
			Handler:    _BookingService_GetBookingsByEmployee_Handler,
		},
		{
			MethodName: "GetAvailableTimesForDoctor",
			Handler:    _BookingService_GetAvailableTimesForDoctor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}

// JournalServiceClient is the client API for JournalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JournalServiceClient interface {
	GetJournal(ctx context.Context, in *JournalRequest, opts ...grpc.CallOption) (*Journal, error)
	CreateJournal(ctx context.Context, in *Journal, opts ...grpc.CallOption) (*Journal, error)
	DeleteJournal(ctx context.Context, in *JournalRequest, opts ...grpc.CallOption) (*Status, error)
	GetHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Health, error)
	UpdateJournal(ctx context.Context, in *Journal, opts ...grpc.CallOption) (*Journal, error)
	GetJournalsByPatient(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Journals, error)
	DeleteJournalDocument(ctx context.Context, in *JournalDocumentRequest, opts ...grpc.CallOption) (*Status, error)
	UpdateJournalDocument(ctx context.Context, in *JournalDocument, opts ...grpc.CallOption) (*JournalDocument, error)
	GetJournalDocumentsByJournal(ctx context.Context, in *JournalRequest, opts ...grpc.CallOption) (*JournalDocuments, error)
	GetJournalDocument(ctx context.Context, in *JournalDocumentRequest, opts ...grpc.CallOption) (*JournalDocument, error)
	CreateJournalDocument(ctx context.Context, in *JournalDocument, opts ...grpc.CallOption) (*JournalDocument, error)
	CreateAttachment(ctx context.Context, in *Attachment, opts ...grpc.CallOption) (*Attachment, error)
}

type journalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJournalServiceClient(cc grpc.ClientConnInterface) JournalServiceClient {
	return &journalServiceClient{cc}
}

func (c *journalServiceClient) GetJournal(ctx context.Context, in *JournalRequest, opts ...grpc.CallOption) (*Journal, error) {
	out := new(Journal)
	err := c.cc.Invoke(ctx, "/JournalService/GetJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) CreateJournal(ctx context.Context, in *Journal, opts ...grpc.CallOption) (*Journal, error) {
	out := new(Journal)
	err := c.cc.Invoke(ctx, "/JournalService/CreateJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) DeleteJournal(ctx context.Context, in *JournalRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/JournalService/DeleteJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) GetHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/JournalService/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) UpdateJournal(ctx context.Context, in *Journal, opts ...grpc.CallOption) (*Journal, error) {
	out := new(Journal)
	err := c.cc.Invoke(ctx, "/JournalService/UpdateJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) GetJournalsByPatient(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Journals, error) {
	out := new(Journals)
	err := c.cc.Invoke(ctx, "/JournalService/GetJournalsByPatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) DeleteJournalDocument(ctx context.Context, in *JournalDocumentRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/JournalService/DeleteJournalDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) UpdateJournalDocument(ctx context.Context, in *JournalDocument, opts ...grpc.CallOption) (*JournalDocument, error) {
	out := new(JournalDocument)
	err := c.cc.Invoke(ctx, "/JournalService/UpdateJournalDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) GetJournalDocumentsByJournal(ctx context.Context, in *JournalRequest, opts ...grpc.CallOption) (*JournalDocuments, error) {
	out := new(JournalDocuments)
	err := c.cc.Invoke(ctx, "/JournalService/GetJournalDocumentsByJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) GetJournalDocument(ctx context.Context, in *JournalDocumentRequest, opts ...grpc.CallOption) (*JournalDocument, error) {
	out := new(JournalDocument)
	err := c.cc.Invoke(ctx, "/JournalService/GetJournalDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) CreateJournalDocument(ctx context.Context, in *JournalDocument, opts ...grpc.CallOption) (*JournalDocument, error) {
	out := new(JournalDocument)
	err := c.cc.Invoke(ctx, "/JournalService/CreateJournalDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journalServiceClient) CreateAttachment(ctx context.Context, in *Attachment, opts ...grpc.CallOption) (*Attachment, error) {
	out := new(Attachment)
	err := c.cc.Invoke(ctx, "/JournalService/CreateAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JournalServiceServer is the server API for JournalService service.
// All implementations must embed UnimplementedJournalServiceServer
// for forward compatibility
type JournalServiceServer interface {
	GetJournal(context.Context, *JournalRequest) (*Journal, error)
	CreateJournal(context.Context, *Journal) (*Journal, error)
	DeleteJournal(context.Context, *JournalRequest) (*Status, error)
	GetHealth(context.Context, *Empty) (*Health, error)
	UpdateJournal(context.Context, *Journal) (*Journal, error)
	GetJournalsByPatient(context.Context, *UserRequest) (*Journals, error)
	DeleteJournalDocument(context.Context, *JournalDocumentRequest) (*Status, error)
	UpdateJournalDocument(context.Context, *JournalDocument) (*JournalDocument, error)
	GetJournalDocumentsByJournal(context.Context, *JournalRequest) (*JournalDocuments, error)
	GetJournalDocument(context.Context, *JournalDocumentRequest) (*JournalDocument, error)
	CreateJournalDocument(context.Context, *JournalDocument) (*JournalDocument, error)
	CreateAttachment(context.Context, *Attachment) (*Attachment, error)
	mustEmbedUnimplementedJournalServiceServer()
}

// UnimplementedJournalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJournalServiceServer struct {
}

func (UnimplementedJournalServiceServer) GetJournal(context.Context, *JournalRequest) (*Journal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJournal not implemented")
}
func (UnimplementedJournalServiceServer) CreateJournal(context.Context, *Journal) (*Journal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJournal not implemented")
}
func (UnimplementedJournalServiceServer) DeleteJournal(context.Context, *JournalRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJournal not implemented")
}
func (UnimplementedJournalServiceServer) GetHealth(context.Context, *Empty) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedJournalServiceServer) UpdateJournal(context.Context, *Journal) (*Journal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJournal not implemented")
}
func (UnimplementedJournalServiceServer) GetJournalsByPatient(context.Context, *UserRequest) (*Journals, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJournalsByPatient not implemented")
}
func (UnimplementedJournalServiceServer) DeleteJournalDocument(context.Context, *JournalDocumentRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJournalDocument not implemented")
}
func (UnimplementedJournalServiceServer) UpdateJournalDocument(context.Context, *JournalDocument) (*JournalDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJournalDocument not implemented")
}
func (UnimplementedJournalServiceServer) GetJournalDocumentsByJournal(context.Context, *JournalRequest) (*JournalDocuments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJournalDocumentsByJournal not implemented")
}
func (UnimplementedJournalServiceServer) GetJournalDocument(context.Context, *JournalDocumentRequest) (*JournalDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJournalDocument not implemented")
}
func (UnimplementedJournalServiceServer) CreateJournalDocument(context.Context, *JournalDocument) (*JournalDocument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJournalDocument not implemented")
}
func (UnimplementedJournalServiceServer) CreateAttachment(context.Context, *Attachment) (*Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttachment not implemented")
}
func (UnimplementedJournalServiceServer) mustEmbedUnimplementedJournalServiceServer() {}

// UnsafeJournalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JournalServiceServer will
// result in compilation errors.
type UnsafeJournalServiceServer interface {
	mustEmbedUnimplementedJournalServiceServer()
}

func RegisterJournalServiceServer(s grpc.ServiceRegistrar, srv JournalServiceServer) {
	s.RegisterService(&JournalService_ServiceDesc, srv)
}

func _JournalService_GetJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).GetJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JournalService/GetJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).GetJournal(ctx, req.(*JournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_CreateJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Journal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).CreateJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JournalService/CreateJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).CreateJournal(ctx, req.(*Journal))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_DeleteJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).DeleteJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JournalService/DeleteJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).DeleteJournal(ctx, req.(*JournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JournalService/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).GetHealth(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_UpdateJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Journal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).UpdateJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JournalService/UpdateJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).UpdateJournal(ctx, req.(*Journal))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_GetJournalsByPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).GetJournalsByPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JournalService/GetJournalsByPatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).GetJournalsByPatient(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_DeleteJournalDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).DeleteJournalDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JournalService/DeleteJournalDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).DeleteJournalDocument(ctx, req.(*JournalDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_UpdateJournalDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).UpdateJournalDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JournalService/UpdateJournalDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).UpdateJournalDocument(ctx, req.(*JournalDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_GetJournalDocumentsByJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).GetJournalDocumentsByJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JournalService/GetJournalDocumentsByJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).GetJournalDocumentsByJournal(ctx, req.(*JournalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_GetJournalDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).GetJournalDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JournalService/GetJournalDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).GetJournalDocument(ctx, req.(*JournalDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_CreateJournalDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).CreateJournalDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JournalService/CreateJournalDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).CreateJournalDocument(ctx, req.(*JournalDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _JournalService_CreateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Attachment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JournalServiceServer).CreateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JournalService/CreateAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JournalServiceServer).CreateAttachment(ctx, req.(*Attachment))
	}
	return interceptor(ctx, in, info, handler)
}

// JournalService_ServiceDesc is the grpc.ServiceDesc for JournalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JournalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JournalService",
	HandlerType: (*JournalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJournal",
			Handler:    _JournalService_GetJournal_Handler,
		},
		{
			MethodName: "CreateJournal",
			Handler:    _JournalService_CreateJournal_Handler,
		},
		{
			MethodName: "DeleteJournal",
			Handler:    _JournalService_DeleteJournal_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _JournalService_GetHealth_Handler,
		},
		{
			MethodName: "UpdateJournal",
			Handler:    _JournalService_UpdateJournal_Handler,
		},
		{
			MethodName: "GetJournalsByPatient",
			Handler:    _JournalService_GetJournalsByPatient_Handler,
		},
		{
			MethodName: "DeleteJournalDocument",
			Handler:    _JournalService_DeleteJournalDocument_Handler,
		},
		{
			MethodName: "UpdateJournalDocument",
			Handler:    _JournalService_UpdateJournalDocument_Handler,
		},
		{
			MethodName: "GetJournalDocumentsByJournal",
			Handler:    _JournalService_GetJournalDocumentsByJournal_Handler,
		},
		{
			MethodName: "GetJournalDocument",
			Handler:    _JournalService_GetJournalDocument_Handler,
		},
		{
			MethodName: "CreateJournalDocument",
			Handler:    _JournalService_CreateJournalDocument_Handler,
		},
		{
			MethodName: "CreateAttachment",
			Handler:    _JournalService_CreateAttachment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}

// UseradminServiceClient is the client API for UseradminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UseradminServiceClient interface {
	GetHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Health, error)
	GetEmployee(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
	GetPatients(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Users, error)
	GetDepartments(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Departments, error)
	GetBeds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Beds, error)
	GetAvailableBeds(ctx context.Context, in *BedsRequest, opts ...grpc.CallOption) (*Beds, error)
	GetHospitals(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Hospitals, error)
}

type useradminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUseradminServiceClient(cc grpc.ClientConnInterface) UseradminServiceClient {
	return &useradminServiceClient{cc}
}

func (c *useradminServiceClient) GetHealth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Health, error) {
	out := new(Health)
	err := c.cc.Invoke(ctx, "/UseradminService/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *useradminServiceClient) GetEmployee(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/UseradminService/GetEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *useradminServiceClient) GetPatients(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/UseradminService/GetPatients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *useradminServiceClient) GetDepartments(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Departments, error) {
	out := new(Departments)
	err := c.cc.Invoke(ctx, "/UseradminService/GetDepartments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *useradminServiceClient) GetBeds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Beds, error) {
	out := new(Beds)
	err := c.cc.Invoke(ctx, "/UseradminService/GetBeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *useradminServiceClient) GetAvailableBeds(ctx context.Context, in *BedsRequest, opts ...grpc.CallOption) (*Beds, error) {
	out := new(Beds)
	err := c.cc.Invoke(ctx, "/UseradminService/GetAvailableBeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *useradminServiceClient) GetHospitals(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Hospitals, error) {
	out := new(Hospitals)
	err := c.cc.Invoke(ctx, "/UseradminService/GetHospitals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UseradminServiceServer is the server API for UseradminService service.
// All implementations must embed UnimplementedUseradminServiceServer
// for forward compatibility
type UseradminServiceServer interface {
	GetHealth(context.Context, *Empty) (*Health, error)
	GetEmployee(context.Context, *UserRequest) (*User, error)
	GetPatients(context.Context, *Empty) (*Users, error)
	GetDepartments(context.Context, *Empty) (*Departments, error)
	GetBeds(context.Context, *Empty) (*Beds, error)
	GetAvailableBeds(context.Context, *BedsRequest) (*Beds, error)
	GetHospitals(context.Context, *Empty) (*Hospitals, error)
	mustEmbedUnimplementedUseradminServiceServer()
}

// UnimplementedUseradminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUseradminServiceServer struct {
}

func (UnimplementedUseradminServiceServer) GetHealth(context.Context, *Empty) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedUseradminServiceServer) GetEmployee(context.Context, *UserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployee not implemented")
}
func (UnimplementedUseradminServiceServer) GetPatients(context.Context, *Empty) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatients not implemented")
}
func (UnimplementedUseradminServiceServer) GetDepartments(context.Context, *Empty) (*Departments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartments not implemented")
}
func (UnimplementedUseradminServiceServer) GetBeds(context.Context, *Empty) (*Beds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeds not implemented")
}
func (UnimplementedUseradminServiceServer) GetAvailableBeds(context.Context, *BedsRequest) (*Beds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableBeds not implemented")
}
func (UnimplementedUseradminServiceServer) GetHospitals(context.Context, *Empty) (*Hospitals, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHospitals not implemented")
}
func (UnimplementedUseradminServiceServer) mustEmbedUnimplementedUseradminServiceServer() {}

// UnsafeUseradminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UseradminServiceServer will
// result in compilation errors.
type UnsafeUseradminServiceServer interface {
	mustEmbedUnimplementedUseradminServiceServer()
}

func RegisterUseradminServiceServer(s grpc.ServiceRegistrar, srv UseradminServiceServer) {
	s.RegisterService(&UseradminService_ServiceDesc, srv)
}

func _UseradminService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseradminServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UseradminService/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseradminServiceServer).GetHealth(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UseradminService_GetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseradminServiceServer).GetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UseradminService/GetEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseradminServiceServer).GetEmployee(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UseradminService_GetPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseradminServiceServer).GetPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UseradminService/GetPatients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseradminServiceServer).GetPatients(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UseradminService_GetDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseradminServiceServer).GetDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UseradminService/GetDepartments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseradminServiceServer).GetDepartments(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UseradminService_GetBeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseradminServiceServer).GetBeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UseradminService/GetBeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseradminServiceServer).GetBeds(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UseradminService_GetAvailableBeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseradminServiceServer).GetAvailableBeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UseradminService/GetAvailableBeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseradminServiceServer).GetAvailableBeds(ctx, req.(*BedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UseradminService_GetHospitals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UseradminServiceServer).GetHospitals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UseradminService/GetHospitals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UseradminServiceServer).GetHospitals(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// UseradminService_ServiceDesc is the grpc.ServiceDesc for UseradminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UseradminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UseradminService",
	HandlerType: (*UseradminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _UseradminService_GetHealth_Handler,
		},
		{
			MethodName: "GetEmployee",
			Handler:    _UseradminService_GetEmployee_Handler,
		},
		{
			MethodName: "GetPatients",
			Handler:    _UseradminService_GetPatients_Handler,
		},
		{
			MethodName: "GetDepartments",
			Handler:    _UseradminService_GetDepartments_Handler,
		},
		{
			MethodName: "GetBeds",
			Handler:    _UseradminService_GetBeds_Handler,
		},
		{
			MethodName: "GetAvailableBeds",
			Handler:    _UseradminService_GetAvailableBeds_Handler,
		},
		{
			MethodName: "GetHospitals",
			Handler:    _UseradminService_GetHospitals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}
