// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package patient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PatientServiceClient is the client API for PatientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PatientServiceClient interface {
	GetHealth(ctx context.Context, in *PEmpty, opts ...grpc.CallOption) (*PHealth, error)
	CreatePatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*Patient, error)
	ReadPatient(ctx context.Context, in *PRequest, opts ...grpc.CallOption) (*Patient, error)
	UpdatePatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*Patient, error)
	DeletePatient(ctx context.Context, in *PRequest, opts ...grpc.CallOption) (*PStatus, error)
	GetPatientsByHospital(ctx context.Context, in *PRequest, opts ...grpc.CallOption) (*Patients, error)
}

type patientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPatientServiceClient(cc grpc.ClientConnInterface) PatientServiceClient {
	return &patientServiceClient{cc}
}

func (c *patientServiceClient) GetHealth(ctx context.Context, in *PEmpty, opts ...grpc.CallOption) (*PHealth, error) {
	out := new(PHealth)
	err := c.cc.Invoke(ctx, "/PatientService/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) CreatePatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, "/PatientService/CreatePatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) ReadPatient(ctx context.Context, in *PRequest, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, "/PatientService/ReadPatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) UpdatePatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, "/PatientService/UpdatePatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) DeletePatient(ctx context.Context, in *PRequest, opts ...grpc.CallOption) (*PStatus, error) {
	out := new(PStatus)
	err := c.cc.Invoke(ctx, "/PatientService/DeletePatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientServiceClient) GetPatientsByHospital(ctx context.Context, in *PRequest, opts ...grpc.CallOption) (*Patients, error) {
	out := new(Patients)
	err := c.cc.Invoke(ctx, "/PatientService/GetPatientsByHospital", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientServiceServer is the server API for PatientService service.
// All implementations must embed UnimplementedPatientServiceServer
// for forward compatibility
type PatientServiceServer interface {
	GetHealth(context.Context, *PEmpty) (*PHealth, error)
	CreatePatient(context.Context, *Patient) (*Patient, error)
	ReadPatient(context.Context, *PRequest) (*Patient, error)
	UpdatePatient(context.Context, *Patient) (*Patient, error)
	DeletePatient(context.Context, *PRequest) (*PStatus, error)
	GetPatientsByHospital(context.Context, *PRequest) (*Patients, error)
	mustEmbedUnimplementedPatientServiceServer()
}

// UnimplementedPatientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPatientServiceServer struct {
}

func (UnimplementedPatientServiceServer) GetHealth(context.Context, *PEmpty) (*PHealth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedPatientServiceServer) CreatePatient(context.Context, *Patient) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatient not implemented")
}
func (UnimplementedPatientServiceServer) ReadPatient(context.Context, *PRequest) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPatient not implemented")
}
func (UnimplementedPatientServiceServer) UpdatePatient(context.Context, *Patient) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatient not implemented")
}
func (UnimplementedPatientServiceServer) DeletePatient(context.Context, *PRequest) (*PStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePatient not implemented")
}
func (UnimplementedPatientServiceServer) GetPatientsByHospital(context.Context, *PRequest) (*Patients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientsByHospital not implemented")
}
func (UnimplementedPatientServiceServer) mustEmbedUnimplementedPatientServiceServer() {}

// UnsafePatientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatientServiceServer will
// result in compilation errors.
type UnsafePatientServiceServer interface {
	mustEmbedUnimplementedPatientServiceServer()
}

func RegisterPatientServiceServer(s grpc.ServiceRegistrar, srv PatientServiceServer) {
	s.RegisterService(&PatientService_ServiceDesc, srv)
}

func _PatientService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetHealth(ctx, req.(*PEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_CreatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).CreatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/CreatePatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).CreatePatient(ctx, req.(*Patient))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_ReadPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).ReadPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/ReadPatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).ReadPatient(ctx, req.(*PRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_UpdatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).UpdatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/UpdatePatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).UpdatePatient(ctx, req.(*Patient))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_DeletePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).DeletePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/DeletePatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).DeletePatient(ctx, req.(*PRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientService_GetPatientsByHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientServiceServer).GetPatientsByHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PatientService/GetPatientsByHospital",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientServiceServer).GetPatientsByHospital(ctx, req.(*PRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PatientService_ServiceDesc is the grpc.ServiceDesc for PatientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PatientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PatientService",
	HandlerType: (*PatientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHealth",
			Handler:    _PatientService_GetHealth_Handler,
		},
		{
			MethodName: "CreatePatient",
			Handler:    _PatientService_CreatePatient_Handler,
		},
		{
			MethodName: "ReadPatient",
			Handler:    _PatientService_ReadPatient_Handler,
		},
		{
			MethodName: "UpdatePatient",
			Handler:    _PatientService_UpdatePatient_Handler,
		},
		{
			MethodName: "DeletePatient",
			Handler:    _PatientService_DeletePatient_Handler,
		},
		{
			MethodName: "GetPatientsByHospital",
			Handler:    _PatientService_GetPatientsByHospital_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "patient.proto",
}
